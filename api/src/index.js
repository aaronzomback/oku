

const typeDefs = require('./graphql-schema');
const { ApolloServer } = require('apollo-server-express');
const express = require('express');
const app = express();
const { Neo4jGraphQL } = require('@neo4j/graphql');

// const { driver } = require('./config.js');

// set environment variables from .env
require('dotenv').config();

const neo4j = require("neo4j-driver");
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(process.env.NEO4J_USER || "neo4j", process.env.NEO4J_PASSWORD || "Reyeswright5")
);


/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({ typeDefs, driver })

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: {
    driver,
    driverConfig: { database: process.env.NEO4J_DATABASE || 'neo4j' },
  },
  schema: neoSchema.schema,
  introspection: true,
  playground: true,
})

// Specify HOST, PORT and PATH for GraphQL endpoint
const PORT = process.env.GRAPHQL_SERVER_PORT || 4001
const PATH = process.env.GRAPHQL_SERVER_PATH || '/graphql'
const HOST = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0'

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a PATH for the GraphQL endpoint
 */

server.applyMiddleware({ app, PATH })

app.listen(PORT, () => {
  console.log(`GraphQL server is up & away at ðŸš€ http://localhost:${PORT}/graphql`)
})

