{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _jsxFileName = \"/Users/aaronzomback/Sites/oku/client-react-native/graphql/ApolloProvider.js\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport App from \"../App.js\";\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4001/graphql'\n});\nvar link = ApolloLink.from([errorLink, httpLink]);\nvar client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache()\n});\nclient.query({\n  query: gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n      {\\n        users {\\n          name\\n          username\\n          email\\n          password\\n          haikus {\\n            content\\n          }\\n          id\\n        }\\n      }\\n    \"])))\n}).then(function (result) {\n  return console.log(result);\n});\nexport default React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }\n}, React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }\n}));","map":{"version":3,"sources":["/Users/aaronzomback/Sites/oku/client-react-native/graphql/ApolloProvider.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","gql","createHttpLink","onError","ApolloLink","App","errorLink","graphQLErrors","networkError","console","log","httpLink","uri","link","from","client","cache","query","then","result"],"mappings":";;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,EAAsDC,GAAtD,QAAiE,gBAAjE;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,GAAP;AAGA,IAAMC,SAAS,GAAGH,OAAO,CAAC,gBAAqC;AAAA,MAAlCI,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,aAA7B;AACD;;AACD,MAAIC,YAAJ,EAAkB;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,YAA5B;AACD;AACF,CAPwB,CAAzB;AAUA,IAAMG,QAAQ,GAAGT,cAAc,CAAC;AAC9BU,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,IAAMC,IAAI,GAAGT,UAAU,CAACU,IAAX,CAAgB,CAACR,SAAD,EAAYK,QAAZ,CAAhB,CAAb;AAGA,IAAMI,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9Be,EAAAA,IAAI,EAAJA,IAD8B;AAE9BG,EAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAFuB,CAAjB,CAAf;AAKAgB,MAAM,CACHE,KADH,CACS;AACLA,EAAAA,KAAK,EAAEhB,GAAF;AADA,CADT,EAiBGiB,IAjBH,CAiBQ,UAAAC,MAAM;AAAA,SAAIV,OAAO,CAACC,GAAR,CAAYS,MAAZ,CAAJ;AAAA,CAjBd;AAqBA,eACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF","sourcesContent":["import { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport App from '../App.js'\n\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\n\n// our GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4001/graphql'\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\n\n// Pass our GraphQL endpoint & error links to ApolloClient API\nconst client = new ApolloClient({ \n  link,\n  cache: new InMemoryCache() \n});\n\nclient\n  .query({\n    query: gql`\n      {\n        users {\n          name\n          username\n          email\n          password\n          haikus {\n            content\n          }\n          id\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\n\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);"]},"metadata":{},"sourceType":"module"}