{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _jsxFileName = \"/Users/aaronzomback/Sites/oku/client-react-native/App.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport HomeScreen from \"./pages/HomeScreen\";\nimport CreateScreen from \"./pages/CreateScreen\";\nimport { screenOptions } from \"./assets/styles\";\nvar Stack = createStackNavigator();\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\nvar httpLink = createHttpLink({\n  uri: 'http://localhost:4001/graphql'\n});\nvar link = ApolloLink.from([errorLink, httpLink]);\nvar client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache()\n});\nclient.query({\n  query: gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n      {\\n        users {\\n          name\\n          username\\n          email\\n          password\\n          haikus {\\n            content\\n          }\\n          id\\n        }\\n      }\\n    \"])))\n}).then(function (result) {\n  return console.log(result);\n});\nexport default function App() {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    screenOptions: screenOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    options: {\n      title: 'OKU'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Chapter\",\n    component: CreateScreen,\n    options: function options(_ref2) {\n      var _ref2$route$params$ch = _ref2.route.params.chapter,\n          number = _ref2$route$params$ch.number,\n          title = _ref2$route$params$ch.title;\n      return {\n        title: number ? \"Chapter \" + number + \": \" + title : title,\n        gestureResponseDistance: {\n          horizontal: 500\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })), React.createElement(StatusBar, {\n    style: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/aaronzomback/Sites/oku/client-react-native/App.js"],"names":["StatusBar","React","NavigationContainer","createStackNavigator","ApolloClient","InMemoryCache","ApolloProvider","gql","createHttpLink","onError","ApolloLink","HomeScreen","CreateScreen","screenOptions","Stack","errorLink","graphQLErrors","networkError","console","log","httpLink","uri","link","from","client","cache","query","then","result","App","title","route","params","chapter","number","gestureResponseDistance","horizontal","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { StyleSheet, Text, View } from 'react-native';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql } from '@apollo/client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\n\nimport HomeScreen from './pages/HomeScreen'\nimport CreateScreen from './pages/CreateScreen'\nimport { screenOptions } from './assets/styles'\n\n\nconst Stack = createStackNavigator()\n\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('graphQLErrors', graphQLErrors);\n  }\n  if (networkError) {\n    console.log('networkError', networkError);\n  }\n});\n\n// our GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4001/graphql'\n});\n\nconst link = ApolloLink.from([errorLink, httpLink]);\n\n// Pass our GraphQL endpoint & error links to ApolloClient API\nconst client = new ApolloClient({ \n  link,\n  cache: new InMemoryCache() \n});\n\nclient\n  .query({\n    query: gql`\n      {\n        users {\n          name\n          username\n          email\n          password\n          haikus {\n            content\n          }\n          id\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\" screenOptions={screenOptions}>\n          <Stack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            options={{ title: 'OKU' }}\n          />\n          <Stack.Screen\n            name=\"Chapter\"\n            component={CreateScreen}\n            options={({\n              route: {\n                params: {\n                  chapter: { number, title },\n                },\n              },\n            }) => ({\n              title: number ? `Chapter ${number}: ${title}` : title,\n              gestureResponseDistance: { horizontal: 500 },\n            })}\n          />\n        </Stack.Navigator>\n        <StatusBar style=\"light\" />\n      </NavigationContainer>\n    </ApolloProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}